library(tidyverse)
library(Biostrings)
library(msa)
library(msaR)
setwd('')
setwd("C:/Users/ranbe/OneDrive - Technion/טכניון/לימודים/תואר שני/ביואינפורמטיקה/HW1")
library(tidyverse)
library(Biostrings)
library(msa)
library(msaR)
setwd("C:/Users/ranbe/OneDrive - Technion/טכניון/לימודים/תואר שני/ביואינפורמטיקה/HW1")
# Load the dataset and inspect the first few rows
covid_data <- read.csv("COVID19_line_list_data.csv")
# Write code to find the dimensions and column names
dim <- dim(covid_data)
dim
col_names <- colnames(covid_data)
col_names
# Write code to calculate and visualize missing data
# Load necessary library
library(ggplot2)
# Calculate the percentage of missing values for each column in covid_data
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Create a data frame for visualization
missing_data <- data.frame(
Column = names(missing_percentage),
MissingPercentage = missing_percentage
)
# Visualize the missing data with a bar plot
ggplot(missing_data, aes(x = Column, y = MissingPercentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Percentage of Missing Values by Column in COVID Data",
x = "Column",
y = "Missing Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Write code to handle missing data
# Calculate the percentage of missing values for each column
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Identify columns with more than 50% missing data
columns_to_remove <- names(missing_percentage[missing_percentage > 50])
# Remove columns with more than 50% missing data
covid_data_cleaned <- covid_data[, !(names(covid_data) %in% columns_to_remove)]
# Print the names of removed columns
cat("Removed columns with more than 50% missing data:", paste(columns_to_remove, collapse = ", "), "\n")
# Summary of the cleaned dataset
print(dim(covid_data_cleaned))
# Write code to convert date columns and calculate the difference
covid_data_cleaned
View(covid_data_cleaned)
View(covid_data_cleaned)
# Write code to convert date columns and calculate the difference
covid_data_cleaned['reporting date']
# Write code to convert date columns and calculate the difference
covid_data_cleaned['reporting.date']
# Write code to convert date columns and calculate the difference
# Ensure the columns have consistent year formatting
covid_data_cleaned$reporting_date <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$reporting_date), format = "%m/%d/%Y")
# Write code to convert date columns and calculate the difference
# Preview the data to confirm the structure
head(covid_data_cleaned$reporting_date)
head(covid_data_cleaned$symptom_onset)
# Step 1: Fix year format and convert to Date
covid_data_cleaned$reporting_date <- as.Date(
gsub("(\\b19|\\b20)$", "20\\1", covid_data_cleaned$reporting_date),
format = "%m/%d/%Y"
)
# Preview the data to confirm the structure
head(covid_data_cleaned$reporting_date)
# Write code to convert date columns and calculate the difference
covid_data_cleaned[is.na(covid_data_cleaned$reporting_date) | is.na(covid_data_cleaned$symptom_onset), ]
# Write code to convert date columns and calculate the difference
# Preview the data to confirm the structure
head(covid_data_cleaned$reporting_date)
head(covid_data_cleaned$symptom_onset)
# Step 1: Fix year format and convert to Date
covid_data_cleaned$reporting_date <- as.Date(
gsub("(\\b19|\\b20)$", "20\\1", covid_data_cleaned$reporting_date),
format = "%m/%d/%Y"
)
covid_data_cleaned$reporting_date
# Write code to convert date columns and calculate the difference
# Ensure the columns have consistent year formatting
covid_data_cleaned$reporting.date <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$reporting.date), format = "%m/%d/%Y")
covid_data_cleaned$symptom.onset <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$symptom.onset), format = "%m/%d/%Y")
# Write code to convert date columns and calculate the difference
# Ensure the columns have consistent year formatting
covid_data_cleaned$reporting.date <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$reporting.date), format = "%m/%d/%Y")
covid_data_cleaned$symptom.onset <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$symptom.onset), format = "%m/%d/%Y")
# Write code to convert date columns and calculate the difference
# Ensure the columns have consistent year formatting
covid_data_cleaned$reporting.date <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$reporting.date), format = "%m/%d/%Y")
covid_data_cleaned$symptom_onset <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$symptom_onset), format = "%m/%d/%Y")
# Calculate the difference in days
covid_data_cleaned$date_difference <- as.numeric(covid_data_cleaned$reporting.date - covid_data_cleaned$symptom_onset)
# View the updated data frame
head(covid_data_cleaned)
library(tidyverse)
library(Biostrings)
library(msa)
library(msaR)
setwd("C:/Users/ranbe/OneDrive - Technion/טכניון/לימודים/תואר שני/ביואינפורמטיקה/HW1")
# Load the dataset and inspect the first few rows
covid_data <- read.csv("COVID19_line_list_data.csv")
# Write code to find the dimensions and column names
dim <- dim(covid_data)
dim
col_names <- colnames(covid_data)
col_names
# Write code to calculate and visualize missing data
# Load necessary library
library(ggplot2)
# Calculate the percentage of missing values for each column in covid_data
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Create a data frame for visualization
missing_data <- data.frame(
Column = names(missing_percentage),
MissingPercentage = missing_percentage
)
# Visualize the missing data with a bar plot
ggplot(missing_data, aes(x = Column, y = MissingPercentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Percentage of Missing Values by Column in COVID Data",
x = "Column",
y = "Missing Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Write code to handle missing data
# Calculate the percentage of missing values for each column
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Identify columns with more than 50% missing data
columns_to_remove <- names(missing_percentage[missing_percentage > 50])
# Remove columns with more than 50% missing data
covid_data_cleaned <- covid_data[, !(names(covid_data) %in% columns_to_remove)]
# Print the names of removed columns
cat("Removed columns with more than 50% missing data:", paste(columns_to_remove, collapse = ", "), "\n")
# Summary of the cleaned dataset
print(dim(covid_data_cleaned))
# Write code to convert date columns and calculate the difference
# Ensure the columns have consistent year formatting
covid_data_cleaned$reporting.date <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$reporting.date), format = "%m/%d/%Y")
covid_data_cleaned$symptom_onset <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$symptom_onset), format = "%m/%d/%Y")
# Calculate the difference in days
covid_data_cleaned$date_difference <- as.numeric(covid_data_cleaned$reporting.date - covid_data_cleaned$symptom_onset)
# View the updated data frame
head(covid_data_cleaned)
# Write code to generate summary statistics
summart(covid_data_cleaned)
# Write code to generate summary statistics
summary(covid_data_cleaned)
# Write code to generate summary statistics
# Generate summary statistics for all numeric columns
numeric_summary <- summary(covid_data_cleaned[sapply(covid_data_cleaned, is.numeric)])
# View the summary statistics
print(numeric_summary)
# Count cases by gender
gender_count <- table(covid_data_cleaned$gender)
# View the gender count
print(gender_count)
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(
covid_data_cleaned$age,
breaks = 20,
main = "Age Distribution",
xlab = "Age",
col = "skyblue",
border = "white",
las = 1
)
# Bar Plot
barplot(
gender_count,
main = "Number of Cases by Gender",
xlab = "Gender",
ylab = "Number of Cases",
col = c("lightpink", "lightblue", "lightgreen"),
border = "white",
las = 1
)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country = "China")
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China")
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China", recovered == 1)
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
select(age)
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
select("age")
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
select(-c(age))
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
select(-c(age))
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
# Write code to filter data and calculate the average age
covid_data_cleaned %>%
filter(country == "China", recovered == 1)
# Write code to filter data and calculate the average age
# Filter the dataset and calculate the average age in one pipeline
average_age <- covid_data_cleaned %>%
filter(country == "China", status == "Recovered") %>%
summarize(avg_age = mean(age, na.rm = TRUE)) %>%
pull(avg_age)
# Write code to filter data and calculate the average age
# Filter the dataset and calculate the average age in one pipeline
average_age <- covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
summarize(avg_age = mean(age, na.rm = TRUE)) %>%
pull(avg_age)
# Print the result
print(paste("The average age of recovered patients in China is:", round(average_age, 2)))
covid_data_cleaned <- covid_data_cleaned %>%
mutate(
reporting_date = as.Date(sub("(\\d{2})$", "20\\1", reporting.date), format = "%m/%d/%Y"),
symptom_onset = as.Date(sub("(\\d{2})$", "20\\1", symptom_onset), format = "%m/%d/%Y"),
date_difference = as.numeric(reporting_date - symptom_onset)
)
# View the first few rows of the updated data frame
head(covid_data_cleaned)
# Write code to convert date columns and calculate the difference
# Ensure the columns have consistent year formatting
covid_data_cleaned$reporting.date <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$reporting.date), format = "%m/%d/%Y")
covid_data_cleaned$symptom_onset <- as.Date(sub("(\\d{2})$", "20\\1", covid_data_cleaned$symptom_onset), format = "%m/%d/%Y")
# Calculate the difference in days
covid_data_cleaned$date_difference <- as.numeric(covid_data_cleaned$reporting.date - covid_data_cleaned$symptom_onset)
# View the updated data frame
head(covid_data_cleaned)
# Write code to convert date columns and calculate the difference
covid_data_cleaned <- covid_data_cleaned %>%
mutate(
reporting_date = as.Date(sub("(\\d{2})$", "20\\1", reporting.date), format = "%m/%d/%Y"),
symptom_onset = as.Date(sub("(\\d{2})$", "20\\1", symptom_onset), format = "%m/%d/%Y"),
date_difference = as.numeric(reporting_date - symptom_onset)
)
head(covid_data_cleaned)
# Write code to handle missing data
covid_data_cleaned <- covid_data_cleaned %>%
select(where(~ mean(is.na(.)) <= 0.5))
library(tidyverse)
library(Biostrings)
library(msa)
library(msaR)
setwd("C:/Users/ranbe/OneDrive - Technion/טכניון/לימודים/תואר שני/ביואינפורמטיקה/HW1")
# Load the dataset and inspect the first few rows
covid_data <- read.csv("COVID19_line_list_data.csv")
# Write code to find the dimensions and column names
dim <- dim(covid_data)
dim
col_names <- colnames(covid_data)
col_names
# Write code to calculate and visualize missing data
# Load necessary library
library(ggplot2)
# Calculate the percentage of missing values for each column in covid_data
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Create a data frame for visualization
missing_data <- data.frame(
Column = names(missing_percentage),
MissingPercentage = missing_percentage
)
# Visualize the missing data with a bar plot
ggplot(missing_data, aes(x = Column, y = MissingPercentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Percentage of Missing Values by Column in COVID Data",
x = "Column",
y = "Missing Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Write code to handle missing data
covid_data_cleaned <- covid_data_cleaned %>%
select(where(~ mean(is.na(.)) <= 0.5))
# Write code to handle missing data
# Calculate the percentage of missing values for each column
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Identify columns with more than 50% missing data
columns_to_remove <- names(missing_percentage[missing_percentage > 50])
# Remove columns with more than 50% missing data
covid_data_cleaned <- covid_data[, !(names(covid_data) %in% columns_to_remove)]
# Print the names of removed columns
cat("Removed columns with more than 50% missing data:", paste(columns_to_remove, collapse = ", "), "\n")
# Summary of the cleaned dataset
print(dim(covid_data_cleaned))
library(tidyverse)
library(Biostrings)
library(msa)
library(msaR)
setwd("C:/Users/ranbe/OneDrive - Technion/טכניון/לימודים/תואר שני/ביואינפורמטיקה/HW1")
# Load the dataset and inspect the first few rows
covid_data <- read.csv("COVID19_line_list_data.csv")
# Write code to find the dimensions and column names
dim <- dim(covid_data)
dim
col_names <- colnames(covid_data)
col_names
# Write code to calculate and visualize missing data
# Load necessary library
library(ggplot2)
# Calculate the percentage of missing values for each column in covid_data
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Create a data frame for visualization
missing_data <- data.frame(
Column = names(missing_percentage),
MissingPercentage = missing_percentage
)
# Visualize the missing data with a bar plot
ggplot(missing_data, aes(x = Column, y = MissingPercentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Percentage of Missing Values by Column in COVID Data",
x = "Column",
y = "Missing Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Write code to handle missing data
# Calculate the percentage of missing values for each column
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Identify columns with more than 50% missing data
columns_to_remove <- names(missing_percentage[missing_percentage > 50])
# Remove columns with more than 50% missing data
covid_data_cleaned <- covid_data[, !(names(covid_data) %in% columns_to_remove)]
# Print the names of removed columns
cat("Removed columns with more than 50% missing data:", paste(columns_to_remove, collapse = ", "), "\n")
# Summary of the cleaned dataset
print(dim(covid_data_cleaned))
# Write code to convert date columns and calculate the difference
covid_data_cleaned <- covid_data_cleaned %>%
mutate(
reporting_date = as.Date(sub("(\\d{2})$", "20\\1", reporting.date), format = "%m/%d/%Y"),
symptom_onset = as.Date(sub("(\\d{2})$", "20\\1", symptom_onset), format = "%m/%d/%Y"),
date_difference = as.numeric(reporting_date - symptom_onset)
)
head(covid_data_cleaned)
# Write code to generate summary statistics
numeric_summary <- summary(covid_data_cleaned[sapply(covid_data_cleaned, is.numeric)])
print(numeric_summary)
# Count cases by gender
gender_count <- table(covid_data_cleaned$gender)
print(gender_count)
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(
covid_data_cleaned$age,
breaks = 20,
main = "Age Distribution",
xlab = "Age",
col = "skyblue",
border = "white",
las = 1
)
# Bar Plot
barplot(
gender_count,
main = "Number of Cases by Gender",
xlab = "Gender",
ylab = "Number of Cases",
col = c("lightpink", "lightblue", "lightgreen"),
border = "white",
las = 1
)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to filter data and calculate the average age
average_age <- covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
summarize(avg_age = mean(age, na.rm = TRUE)) %>%
pull(avg_age)
print(paste("The average age of recovered patients in China is:", round(average_age, 2)))
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  col = "skyblue",  las = 1
)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue", "lightgreen"),  las = 1
)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  col = "skyblue",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases"),  las = 1)
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  col = "skyblue",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue", "lightgreen"))
par(mfrow = c(1, 1))  # Reset plot area to single plot
,  las = 1
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  col = "skyblue",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue", "lightgreen"),  las = 1)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  col = "skyblue",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue", "lightgreen"))
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue", "lightgreen"),  las = 1)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue"),  las = 1)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  las = 1, col = "Blue")
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  las = 1, col = c("Blue"))
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  las = 1, col = c("Blue"))
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue"),  las = 1)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age, breaks = 20,  main = "Age Distribution",  xlab = "Age",  col = "lightblue",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue"),  las = 1)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age,  main = "Age Distribution",  xlab = "Age",  col = "lightblue",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue"),  las = 1)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to handle missing data
missing_percentage <- covid_data %>%
summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
pivot_longer(everything(), names_to = "column", values_to = "missing_percentage")
# Identify columns with more than 50% missing data
columns_to_remove <- missing_percentage %>%
filter(missing_percentage > 50) %>%
pull(column)
# Remove columns with more than 50% missing data
covid_data_cleaned <- covid_data %>%
select(-all_of(columns_to_remove))
# Write code to handle missing data
# Ensure the dataset is a tibble for tidyverse compatibility
covid_data <- as_tibble(covid_data)
# Calculate the percentage of missing values for each column
missing_percentage <- covid_data %>%
summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
pivot_longer(everything(), names_to = "column", values_to = "missing_percentage")
# Identify columns with more than 50% missing data
columns_to_remove <- missing_percentage %>%
filter(missing_percentage > 50) %>%
pull(column)
# Remove columns with more than 50% missing data
covid_data_cleaned <- covid_data %>%
select(-all_of(columns_to_remove))
# Write code to handle missing data
# Ensure the dataset is a tibble for tidyverse compatibility
covid_data <- as_tibble(covid_data)
# Calculate the percentage of missing values for each column
missing_percentage <- covid_data %>%
summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
pivot_longer(everything(), names_to = "column", values_to = "missing_percentage")
# Identify columns with more than 50% missing data
columns_to_remove <- missing_percentage %>%
filter(missing_percentage > 50) %>%
pull(column)
# Remove columns with more than 50% missing data using dplyr explicitly
covid_data_cleaned <- covid_data %>%
dplyr::select(-all_of(columns_to_remove))
# Print the names of removed columns
cat("Removed columns with more than 50% missing data:", paste(columns_to_remove, collapse = ", "), "\n")
# Summary of the cleaned dataset
print(dim(covid_data_cleaned))
