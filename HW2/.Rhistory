library(DESeq2)
library(ashr)
library(EnhancedVolcano)
library(factoextra)
library(clusterProfiler)
library(msigdbr)
library(tidyverse)
#setwd("path/to/your/working/directory")
library(DESeq2)
library(ashr)
library(EnhancedVolcano)
library(factoextra)
library(clusterProfiler)
library(msigdbr)
library(tidyverse)
#setwd("path/to/your/working/directory")
library(DESeq2)
library(ashr)
library(EnhancedVolcano)
library(factoextra)
library(clusterProfiler)
library(msigdbr)
library(tidyverse)
#setwd("path/to/your/working/directory")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt.gz")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
library(DESeq2)
library(ashr)
library(EnhancedVolcano)
library(factoextra)
library(clusterProfiler)
library(msigdbr)
library(tidyverse)
library(GEOquery)
#setwd("path/to/your/working/directory")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
# Implement your code here:
# Create a clean metadata table
metadata <- as_tibble(metadata) %>%
dplyr::select(sample = `description`, `Subject` = `study subject id #:ch1`,`Day` = `test day:ch1`, `Time` = `time of blood draw:ch1`)
# Implement your code here:
# Create a clean metadata table
metadata <- as_tibble(metadata) %>%
dplyr::select(`Sample` = `description`, `Subject` = `study subject id #:ch1`,`Day` = `test day:ch1`, `Time` = `time of blood draw:ch1`)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata_tibble <- metadata %>%
as_tibble() %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata_tibble <- metadata %>%
as_tibble() %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
colnames(metadata)
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
colnames(metadata)
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata_tibble <- metadata %>%
as_tibble() %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
colnames(metadata)
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
# Access the phenotypic data
metadata_pdata <- pData(metadata)
# View column names to identify relevant columns
colnames(metadata_pdata)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata_tibble <- metadata %>%
as_tibble() %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
#metadata_pdata <- pData(metadata)
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
#metadata_pdata <- pData(metadata)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata_tibble <- as_tibble(metadata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
metadata_pdata <- pData(metadata)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata_tibble <- as_tibble(metadata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
colnames(metadata)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata_tibble <- as_tibble(metadata_pdata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
# View the prepared tibble
metadata_tibble
metadata$Time <- relevel(metadata$Time, ref="fasting")
levels(metadata$Time)
metadata$Time <- relevel(metadata_tibble$Time, ref="fasting")
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata <- as_tibble(metadata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata <- as_tibble(metadata_pdata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
# View the prepared tibble
metadata
metadata$Time <- relevel(metadata$Time, ref="fasting")
# Implement your code here:
filtered_gene_counts <- gene_counts[rowSums(gene_counts) > 0, ]
counts
# Implement your code here:
counts <- counts[rowSums(counts) > 0, ]
# Implement your code here:
dds <- DESeqDataSetFromMatrix(
countData = gene_counts,            # The raw count matrix
colData = metadata,                 # Metadata data frame
design = ~ Time                     # Experimental design using the "Time" column
)
# Implement your code here:
dds <- DESeqDataSetFromMatrix(
countData = counts,            # The raw count matrix
colData = metadata,                 # Metadata data frame
design = ~ Time                     # Experimental design using the "Time" column
)
# Implement your code here:
dds <- DESeq(dds)  # Perform normalization and differential expression analysis
resultsNames(dds)  # View available contrasts or comparisons
# Implement your code here:
# Shrink Log2 Fold Change values using apeglm
res <- lfcShrink(dds, coef = "Time_3.hr.postprandial_vs_fasting", type = "apeglm")
# Add gene symbols to results
res$symbol <- mapIds(org.Hs.eg.db,
keys = rownames(res),
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# Implement your code here:
resOrdered <- res[order(res$pvalue),]
resOrdered
# Implement your code here:
resOrdered <- res[order(res$pvalue),]
resOrdered[resOrdered$padj < 0.05]
# Implement your code here:
resOrdered <- res[order(res$pvalue),]
# Implement your code here:
resOrdered <- res[order(res$pvalue),]
resOrdered[resOrdered$padj < 0.05]
# Implement your code here:
resOrdered <- res[order(res$pvalue),]
significant_genes <- res[which(res$padj < 0.05), ]
num_significant_genes <- nrow(significant_genes)
library(DESeq2)
library(ashr)
library(EnhancedVolcano)
library(factoextra)
library(clusterProfiler)
library(msigdbr)
library(tidyverse)
library(GEOquery)
#setwd("path/to/your/working/directory")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
metadata_pdata <- pData(metadata)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata <- as_tibble(metadata_pdata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
# View the prepared tibble
metadata
metadata$Time <- relevel(metadata$Time, ref="fasting")
# Implement your code here:
counts <- counts[rowSums(counts) > 0, ]
# Implement your code here:
dds <- DESeqDataSetFromMatrix(
countData = counts,            # The raw count matrix
colData = metadata,                 # Metadata data frame
design = ~ Time                     # Experimental design using the "Time" column
tidy = TRUE
# Implement your code here:
resOrdered <- res[order(res$pvalue),]
significant_genes <- res[which(res$padj < 0.05), ]
num_significant_genes <- nrow(significant_genes)
num_significant_genes
library(DESeq2)
library(ashr)
library(EnhancedVolcano)
library(factoextra)
library(clusterProfiler)
library(msigdbr)
library(tidyverse)
library(GEOquery)
#setwd("path/to/your/working/directory")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
metadata_pdata <- pData(metadata)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata <- as_tibble(metadata_pdata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
# View the prepared tibble
metadata
metadata$Time <- relevel(metadata$Time, ref="fasting")
# Implement your code here:
counts <- counts[rowSums(counts) > 0, ]
# Implement your code here:
dds <- DESeqDataSetFromMatrix(
countData = counts,            # The raw count matrix
colData = metadata,                 # Metadata data frame
design = ~ Time                     # Experimental design using the "Time" column
tidy = TRUE
# Implement your code here:
resOrdered <- res[order(res$pvalue),]
library(DESeq2)
library(ashr)
library(EnhancedVolcano)
library(factoextra)
library(clusterProfiler)
library(msigdbr)
library(tidyverse)
library(GEOquery)
#setwd("path/to/your/working/directory")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
metadata_pdata <- pData(metadata)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata <- as_tibble(metadata_pdata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
# View the prepared tibble
metadata
metadata$Time <- relevel(metadata$Time, ref="fasting")
# Implement your code here:
counts <- counts[rowSums(counts) > 0, ]
# Implement your code here:
dds <- DESeqDataSetFromMatrix(
countData = counts,            # The raw count matrix
colData = metadata,                 # Metadata data frame
design = ~ Time                     # Experimental design using the "Time" column
tidy = TRUE
library(DESeq2)
library(ashr)
library(EnhancedVolcano)
library(factoextra)
library(clusterProfiler)
library(msigdbr)
library(tidyverse)
library(GEOquery)
#setwd("path/to/your/working/directory")
counts <- read.table("GSE127530_fixed_combinedCounts.txt.gz",
stringsAsFactors = FALSE, sep = '\t',
header = TRUE, check.names = FALSE)
metadata <- getGEO(filename = "GSE127530_series_matrix.txt")
metadata_pdata <- pData(metadata)
# Implement your code here:
# Load the necessary library
library(dplyr)
# Convert metadata to a tibble and prepare the data
metadata <- as_tibble(metadata_pdata) %>%
select(
Sample = `description`,
Subject = `study subject id #:ch1`,
Day = `test day:ch1`,
Time = `time of blood draw:ch1`
) %>%
mutate(Time = as.factor(Time))  # Ensure the Time column is a factor
# View the prepared tibble
metadata
metadata$Time <- relevel(metadata$Time, ref="fasting")
# Implement your code here:
counts <- counts[rowSums(counts) > 0, ]
# Implement your code here:
dds <- DESeqDataSetFromMatrix(
countData = counts,            # The raw count matrix
colData = metadata,                 # Metadata data frame
design = ~ Time                     # Experimental design using the "Time" column
)
# Implement your code here:
dds <- DESeq(dds)  # Perform normalization and differential expression analysis
resultsNames(dds)  # View available contrasts or comparisons
# Implement your code here:
# Shrink Log2 Fold Change values using apeglm
res <- lfcShrink(dds, coef = "Time_3.hr.postprandial_vs_fasting", type = "apeglm")
# Implement your code here:
# Shrink Log2 Fold Change values using apeglm
res <- lfcShrink(dds, coef = "Time_3.hr.postprandial_vs_fasting", type = "apeglm")
# Implement your code here:
resOrdered <- res[order(res$pvalue),]
significant_genes <- res[which(res$padj < 0.05), ]
num_significant_genes <- nrow(significant_genes)
num_significant_genes
