summarize(avg_age = mean(age, na.rm = TRUE)) %>%
pull(avg_age)
print(paste("The average age of recovered patients in China is:", round(average_age, 2)))
# Write code to filter and clean the data
# Remove rows with missing values in the `age` column and filter into two groups
covid_data_cleaned <- covid_data_cleaned %>%
drop_na(age) %>%
mutate(
group = if_else(recovered != 0, "Recovered", "Non-Recovered")
)
# Split into two separate data frames
recovered_patients <- covid_data_cleaned %>%
filter(group == "Recovered")
non_recovered_patients <- covid_data_cleaned %>%
filter(group == "Non-Recovered")
# View the datasets
head(covid_data_cleaned)
head(recovered_patients)
head(non_recovered_patients)
# Write code to assess normality
# Plot histograms for age distribution
recovered_patients %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "white", alpha = 0.7) +
labs(title = "Age Distribution for Recovered Patients",
x = "Age",
y = "Count") +
theme_minimal()
non_recovered_patients %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 5, fill = "red", color = "white", alpha = 0.7) +
labs(title = "Age Distribution for Non-Recovered Patients",
x = "Age",
y = "Count") +
theme_minimal()
# Perform Shapiro-Wilk test for age distribution
recovered_age_test <- shapiro.test(recovered_patients$age)
non_recovered_age_test <- shapiro.test(non_recovered_patients$age)
# Print test results
print("Shapiro-Wilk Test for Recovered Patients:")
print(recovered_age_test)
print("Shapiro-Wilk Test for Non-Recovered Patients:")
print(non_recovered_age_test)
# Write code to perform a Mann-Whitney U test
# Perform the Mann-Whitney U test (Wilcoxon rank-sum test in R)
mann_whitney_test <- wilcox.test(recovered_patients$age, non_recovered_patients$age,  paired = FALSE, alternative = "two.sided")
# Print the test results
print("Mann-Whitney U Test Results:")
print(mann_whitney_test)
# Write code to create the boxplot and annotate with the p-value
library(tidyverse)
library(ggpubr) # For adding the p-value annotation
# Perform Mann-Whitney U test
mann_whitney_test <- wilcox.test(age ~ group, data = covid_data_cleaned, exact = FALSE)
# Extract the p-value from the test result
p_value <- mann_whitney_test$p.value
# Create a boxplot
ggplot(covid_data_cleaned, aes(x = group, y = age, fill = group)) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.size = 2) +
scale_fill_manual(values = c("Recovered" = "blue", "Non-Recovered" = "red")) +
labs(
title = "Age Distribution for Recovered and Non-Recovered Patients",
x = "Group",
y = "Age"
) +
theme_minimal() +
theme(legend.position = "none") +
stat_compare_means(method = "wilcox.test", label = "p.signif", label.y = max(covid_data_cleaned$age) + 5) + # Annotate p-value
annotate("text", x = 1.5, y = max(covid_data_cleaned$age) + 10,
label = paste("p-value =", signif(p_value, digits = 3)), size = 5)
# Write code to create the boxplot and annotate with the p-value
# Extract the p-value from the test result
p_value <- mann_whitney_test$p.value
# Create a boxplot
ggplot(covid_data_cleaned, aes(x = group, y = age, fill = group)) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.size = 2) +
scale_fill_manual(values = c("Recovered" = "blue", "Non-Recovered" = "red")) +
labs(
title = "Age Distribution for Recovered and Non-Recovered Patients",
x = "Group",
y = "Age"
) +
theme_minimal() +
theme(legend.position = "none") +
stat_compare_means(method = "wilcox.test", label = "p.signif", label.y = max(covid_data_cleaned$age) + 5) + # Annotate p-value
annotate("text", x = 1.5, y = max(covid_data_cleaned$age) + 10,
label = paste("p-value =", signif(p_value, digits = 3)), size = 5)
# Enter your code here:
covid_world <- read.csv("owid-covid-data.csv")
covid_world
View(covid_world)
# Enter your code here:
# Create the subset table 'covid_hdi_vs_deaths'
covid_hdi_vs_deaths <- covid_world %>%
filter(date == "2021-11-08") %>%
select(location, human_development_index, population, total_deaths) %>%
drop_na() %>%
mutate(total_deaths_per_million = round(total_deaths / population * 1e6, 0))
# View the resulting dataset
head(covid_hdi_vs_deaths)
# Enter your code here:
# Create the scatterplot with linear regression line
ggplot(covid_hdi_vs_deaths, aes(x = human_development_index, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatterplot points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Linear regression line (without confidence interval)
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Human Development Index (HDI)",
y = "Total Deaths per Million"
) +
theme_minimal()  # Clean theme for the plot
# Enter your code here:
# Create the scatterplot with linear regression line
ggplot(covid_hdi_vs_deaths, aes(x = human_development_index, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatterplot points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Linear regression line (without confidence interval)
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Human Development Index (HDI)",
y = "Total Deaths per Million")
# Enter your code here:
# Create the scatterplot with linear regression line
ggplot(covid_hdi_vs_deaths, aes(x = human_development_index, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatterplot points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Linear regression line (without confidence interval)
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Human Development Index (HDI)",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
ggplot(covid_hdi_vs_deaths, aes(x = human_development_index, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Human Development Index (HDI)",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
# Calculate Pearson correlation coefficient
pearson_corr <- cor(covid_hdi_vs_deaths$human_development_index,
covid_hdi_vs_deaths$total_deaths_per_million,
method = "pearson")
# Calculate Spearman correlation coefficient
spearman_corr <- cor(covid_hdi_vs_deaths$human_development_index,
covid_hdi_vs_deaths$total_deaths_per_million,
method = "spearman")
# Print the correlation coefficients
cat("Pearson Correlation Coefficient:", pearson_corr, "\n")
cat("Spearman Correlation Coefficient:", spearman_corr, "\n")
# Enter your code here:
ggplot(covid_hdi_vs_deaths, aes(x = stringency_index, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Stringency Index",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
ggplot(covid_world, aes(x = stringency_index, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Stringency Index",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
# Create the subset table 'covid_hdi_vs_deaths'
covid_stringency_vs_deaths <- covid_world %>%
filter(date == "2021-11-08") %>%
select(location, stringency_index, population, total_deaths) %>%
drop_na() %>%
mutate(total_deaths_per_million = round(total_deaths / population * 1e6, 0))
ggplot(covid_stringency_vs_deaths, aes(x = stringency_index, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Stringency Index",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
# Create the subset table 'covid_hdi_vs_deaths'
covid_stringency_vs_deaths <- covid_world %>%
filter(date == "2021-11-08") %>%
select(location, handwashing_facilities, population, total_deaths) %>%
drop_na() %>%
mutate(total_deaths_per_million = round(total_deaths / population * 1e6, 0))
ggplot(covid_stringency_vs_deaths, aes(x = handwashing_facilities, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Stringency Index",
y = "Total Deaths per Million"
) +
theme_minimal()
ggplot(covid_stringency_vs_deaths, aes(x = extreme_poverty, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Stringency Index",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
# Create the subset table 'covid_hdi_vs_deaths'
covid_stringency_vs_deaths <- covid_world %>%
filter(date == "2021-11-08") %>%
select(location, extreme_poverty, population, total_deaths) %>%
drop_na() %>%
mutate(total_deaths_per_million = round(total_deaths / population * 1e6, 0))
ggplot(covid_stringency_vs_deaths, aes(x = extreme_poverty, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Stringency Index",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
# Create the subset table 'covid_hdi_vs_deaths'
covid_stringency_vs_deaths <- covid_world %>%
filter(date == "2021-11-08") %>%
select(location, median_age, population, total_deaths) %>%
drop_na() %>%
mutate(total_deaths_per_million = round(total_deaths / population * 1e6, 0))
ggplot(covid_stringency_vs_deaths, aes(x = median_age, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Stringency Index",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
# Create the subset table 'covid_hdi_vs_deaths'
covid_age_vs_deaths <- covid_world %>%
filter(date == "2021-11-08") %>%
select(location, median_age, population, total_deaths) %>%
drop_na() %>%
mutate(total_deaths_per_million = round(total_deaths / population * 1e6, 0))
ggplot(covid_age_vs_deaths, aes(x = median_age, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Median Age",
y = "Total Deaths per Million"
) +
theme_minimal()
browseVignettes("Biostrings")
# Enter your code here:
# Specify the path to the "covid_spike_variants.fasta" file
file_path <- "covid_spike_variants.fasta"
# Load the file using readAAStringSet() and assign it to the 'variants' variable
variants <- readAAStringSet(file_path)
# Print the loaded data to inspect
variants
# Enter your code here:
file_path <- "covid_spike_variants.fasta"
variants <- readAAStringSet(file_path)
variants
# Enter your code here:
# Check the documentation for msa function
?msa
# Run the MSA on the sequences in 'variants' (the AAStringSet object)
variants.msa <- msa(variants)
# Print the MSA result
variants.msa
AMINO_ACID_CODE
GENETIC_CODE
# Enter your code here:
variants.msa.seqinr <- msaConvert(variants.msa, type="seqinr::alignment")
variants.msa.distmat <- seqinr::dist.alignment(variants.msa.seqinr, matrix = "similarity")
variants.msa.distmat
# Enter your code here:
variants.msa.seqinr <- msaConvert(variants.msa, type="seqinr::alignment")
variants.msa.distmat <- seqinr::dist.alignment(variants.msa.seqinr, matrix = "similarity")
print(variants.msa.distmat)
library(tidyverse)
library(ggplot2)
library(Biostrings)
library(msa)
library(msaR)
library(ggpubr) # For adding the p-value annotation
library(seqinr)
#setwd("HW1")
# Load the dataset and inspect the first few rows
covid_data <- read.csv("COVID19_line_list_data.csv")
# Write code to find the dimensions and column names
dataset_dimensions <- dim(covid_data)
column_names <- colnames(covid_data)
cat("The dataset has", dataset_dimensions[1], "rows and", dataset_dimensions[2], "columns.\n")
cat("The column names are:\n")
print(column_names)
# Write code to calculate and visualize missing data
# Calculate the percentage of missing values for each column in covid_data
missing_percentage <- colSums(is.na(covid_data)) / nrow(covid_data) * 100
# Create a data frame for visualization
missing_data <- data.frame(
Column = names(missing_percentage),
MissingPercentage = missing_percentage
)
# Visualize the missing data with a bar plot
ggplot(missing_data, aes(x = Column, y = MissingPercentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Percentage of Missing Values by Column in COVID Data",
x = "Column",
y = "Missing Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Write code to handle missing data
# Ensure the dataset is a tibble for tidyverse compatibility
covid_data <- as_tibble(covid_data)
# Calculate the percentage of missing values for each column
missing_percentage <- covid_data %>%
summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
pivot_longer(everything(), names_to = "column", values_to = "missing_percentage")
# Identify columns with more than 50% missing data
columns_to_remove <- missing_percentage %>%
filter(missing_percentage > 50) %>%
pull(column)
# Remove columns with more than 50% missing data using dplyr explicitly
covid_data_cleaned <- covid_data %>%
dplyr::select(-all_of(columns_to_remove))
# Print the names of removed columns
cat("Removed columns with more than 50% missing data:", paste(columns_to_remove, collapse = ", "), "\n")
# Summary of the cleaned dataset
print(dim(covid_data_cleaned))
# Write code to convert date columns and calculate the difference
covid_data_cleaned <- covid_data_cleaned %>%
mutate(
reporting_date = as.Date(sub("(\\d{2})$", "20\\1", reporting.date), format = "%m/%d/%Y"),
symptom_onset = as.Date(sub("(\\d{2})$", "20\\1", symptom_onset), format = "%m/%d/%Y"),
date_difference = as.numeric(reporting_date - symptom_onset)
)
head(covid_data_cleaned)
# Write code to generate summary statistics
numeric_summary <- summary(covid_data_cleaned[sapply(covid_data_cleaned, is.numeric)])
print(numeric_summary)
# Count cases by gender
gender_count <- table(covid_data_cleaned$gender)
print(gender_count)
# Write code to create the histogram and bar plot
par(mfrow = c(1, 2))  # Split plot area into 1 row and 2 columns
# Histogram
hist(covid_data_cleaned$age,  main = "Age Distribution",  xlab = "Age",  col = "lightblue",  las = 1)
# Bar Plot
barplot(gender_count, main = "Number of Cases by Gender", xlab = "Gender", ylab = "Number of Cases", col = c("lightpink", "lightblue"),  las = 1)
par(mfrow = c(1, 1))  # Reset plot area to single plot
# Write code to filter data and calculate the average age
average_age <- covid_data_cleaned %>%
filter(country == "China", recovered == 1) %>%
summarize(avg_age = mean(age, na.rm = TRUE)) %>%
pull(avg_age)
print(paste("The average age of recovered patients in China is:", round(average_age, 2)))
# Write code to filter and clean the data
# Remove rows with missing values in the `age` column and filter into two groups
covid_data_cleaned <- covid_data_cleaned %>%
drop_na(age) %>%
mutate(
group = if_else(recovered != 0, "Recovered", "Non-Recovered")
)
# Split into two separate data frames
recovered_patients <- covid_data_cleaned %>%
filter(group == "Recovered")
non_recovered_patients <- covid_data_cleaned %>%
filter(group == "Non-Recovered")
# View the datasets
head(covid_data_cleaned)
head(recovered_patients)
head(non_recovered_patients)
# Write code to assess normality
# Plot histograms for age distribution
recovered_patients %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "white", alpha = 0.7) +
labs(title = "Age Distribution for Recovered Patients",
x = "Age",
y = "Count") +
theme_minimal()
non_recovered_patients %>%
ggplot(aes(x = age)) +
geom_histogram(binwidth = 5, fill = "red", color = "white", alpha = 0.7) +
labs(title = "Age Distribution for Non-Recovered Patients",
x = "Age",
y = "Count") +
theme_minimal()
# Perform Shapiro-Wilk test for age distribution
recovered_age_test <- shapiro.test(recovered_patients$age)
non_recovered_age_test <- shapiro.test(non_recovered_patients$age)
# Print test results
print("Shapiro-Wilk Test for Recovered Patients:")
print(recovered_age_test)
print("Shapiro-Wilk Test for Non-Recovered Patients:")
print(non_recovered_age_test)
# Write code to perform a Mann-Whitney U test
# Perform the Mann-Whitney U test (Wilcoxon rank-sum test in R)
mann_whitney_test <- wilcox.test(recovered_patients$age, non_recovered_patients$age,  paired = FALSE, alternative = "two.sided")
# Print the test results
print("Mann-Whitney U Test Results:")
print(mann_whitney_test)
# Write code to create the boxplot and annotate with the p-value
ggplot(covid_data_cleaned, aes(x = group, y = age, fill = group)) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.size = 2) +
scale_fill_manual(values = c("Recovered" = "blue", "Non-Recovered" = "red")) +
labs(
title = "Age Distribution for Recovered and Non-Recovered Patients",
x = "Group",
y = "Age"
) +
theme_minimal() +
theme(legend.position = "none") +
stat_compare_means(method = "wilcox.test", label = "p.signif", label.y = max(covid_data_cleaned$age) + 5) + # Annotate p-value
annotate("text", x = 1.5, y = max(covid_data_cleaned$age) + 10,
label = paste("p-value =", signif(mann_whitney_test$p.value, digits = 3)), size = 5)
# Enter your code here:
covid_world <- read.csv("owid-covid-data.csv")
covid_world
View(covid_world)
# Enter your code here:
# Create the subset table 'covid_hdi_vs_deaths'
covid_hdi_vs_deaths <- covid_world %>%
filter(date == "2021-11-08") %>%
select(location, human_development_index, population, total_deaths) %>%
drop_na() %>%
mutate(total_deaths_per_million = round(total_deaths / population * 1e6, 0))
# View the resulting dataset
head(covid_hdi_vs_deaths)
# Enter your code here:
ggplot(covid_hdi_vs_deaths, aes(x = human_development_index, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Human Development Index (HDI)",
y = "Total Deaths per Million"
) +
theme_minimal()
# Enter your code here:
# Calculate Pearson correlation coefficient
pearson_corr <- cor(covid_hdi_vs_deaths$human_development_index,
covid_hdi_vs_deaths$total_deaths_per_million,
method = "pearson")
# Calculate Spearman correlation coefficient
spearman_corr <- cor(covid_hdi_vs_deaths$human_development_index,
covid_hdi_vs_deaths$total_deaths_per_million,
method = "spearman")
# Print the correlation coefficients
cat("Pearson Correlation Coefficient:", pearson_corr, "\n")
cat("Spearman Correlation Coefficient:", spearman_corr, "\n")
# Enter your code here:
# Create the subset table 'covid_hdi_vs_deaths'
covid_age_vs_deaths <- covid_world %>%
filter(date == "2021-11-08") %>%
select(location, median_age, population, total_deaths) %>%
drop_na() %>%
mutate(total_deaths_per_million = round(total_deaths / population * 1e6, 0))
ggplot(covid_age_vs_deaths, aes(x = median_age, y = total_deaths_per_million)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Relationship between HDI and Total Deaths per Million",
x = "Median Age",
y = "Total Deaths per Million"
) +
theme_minimal()
browseVignettes("Biostrings")
# Enter your code here:
file_path <- "covid_spike_variants.fasta"
variants <- readAAStringSet(file_path)
variants
# Enter your code here:
?msa
variants.msa <- msa(variants)
variants.msa
msaR(AAMultipleAlignment(variants.msa), colorscheme = "taylor")
# Enter your code here:
variants.msa.seqinr <- msaConvert(variants.msa, type="seqinr::alignment")
variants.msa.distmat <- seqinr::dist.alignment(variants.msa.seqinr, matrix = "similarity")
variants.msa.distmat
# Enter your code here:
variants.msa.seqinr <- msaConvert(variants.msa, type="seqinr::alignment")
variants.msa.distmat <- seqinr::dist.alignment(variants.msa.seqinr, matrix = "similarity")
variants.msa.distmat
# Enter your code here:
variants.msa.seqinr <- msaConvert(variants.msa, type="seqinr::alignment")
variants.msa.distmat <- seqinr::dist.alignment(variants.msa.seqinr, matrix = "similarity")
variants.msa.distmat
# Enter your code here:
variants.msa.clusters <- hclust(variants.msa.distmat, method = "ward.D")
plot(variants.msa.clusters, hang = -1, main = "Covid19 Varinats Phylogenetic Tree", xlab = "Variants", ylab  = "Distance")
# Enter your code here:
variants.msa.seqinr <- msaConvert(variants.msa, type="seqinr::alignment")
variants.msa.distmat <- seqinr::dist.alignment(variants.msa.seqinr, matrix = "similarity")
variants.msa.distmat
# Enter your code here:
covid_world <- read.csv("owid-covid-data.csv")
